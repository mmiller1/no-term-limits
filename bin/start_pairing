#!/usr/bin/env zsh

set -eo pipefail

# HELP: set up your computer to allow a remote pair partner to join temporarily. Defaults to getting the ssh public for a user from github. Add a get_ssh_public_key_from_username command for custom ssh keys if github will not work for that user. Set NO_TERM_LIMITS_REMOTE_PAIR_USERNAME for the desired username of the pair user. It defaults to 'pair'.

if [[ -n "$1" ]]; then
  USER_CSV_STRING="$1"
  echo "allow pair access for bitbucket server user: ${USER_CSV_STRING}"
else
  USER_CSV_STRING="${NO_TERM_LIMITS_DEFAULT_PAIR_USER_CSV_STRING}"
  echo "defaulting to allowing pair access for bitbucket server user: ${USER_CSV_STRING}"
fi

if [[ -z "$NO_TERM_LIMITS_REMOTE_PAIR_USERNAME" ]]; then
  export NO_TERM_LIMITS_REMOTE_PAIR_USERNAME=pair
fi

if is_mac; then
  user_dir="/Users/$NO_TERM_LIMITS_REMOTE_PAIR_USERNAME"
else
  user_dir="/home/${NO_TERM_LIMITS_REMOTE_PAIR_USERNAME}"
fi

function user_exists() {
  if is_mac; then
    dscl . list "$user_dir"  > /dev/null 2>&1
  else
    id -u "$NO_TERM_LIMITS_REMOTE_PAIR_USERNAME"
  fi
}

function create_stuff() {
  # not sure why removing the user from admin group makes it stop working even when the user is in the staff group
  # and /tmp/wemux-wemux is owned by the group staff
  if is_mac; then
    sudo sysadminctl -addUser "$NO_TERM_LIMITS_REMOTE_PAIR_USERNAME" -fullName "$NO_TERM_LIMITS_REMOTE_PAIR_USERNAME" -admin -home "$user_dir"
    sudo dscl . -append /Groups/staff GroupMembership $NO_TERM_LIMITS_REMOTE_PAIR_USERNAME

    # otherwise it's owned by $USER:wheel, a more powerful group
    if [[ -e /tmp/wemux-wemux ]]; then
      sudo chown "$(echo $USER):staff" /tmp/wemux-wemux
    fi
  else
    sudo useradd --create-home "$NO_TERM_LIMITS_REMOTE_PAIR_USERNAME"
  fi
  sudo mkdir -p "$user_dir/.ssh"

  string="1::3"
  user_array=("${(@s/,/)USER_CSV_STRING}")
  for user in ${user_array} ; do
    echo "adding user to authorized keys: ${user}"
    ssh_public_keys=""
    if command -v get_ssh_public_key_from_username >/dev/null ; then
      ssh_public_keys=$(get_ssh_public_key_from_username "$user")
    fi

    if [[ -z "$ssh_public_keys" ]]; then
      ssh_public_keys="$(curl --fail "https://github.com/${user}.keys")"
    fi
    while read -r ssh_public_key; do
      if [[ -n "$ssh_public_key" ]]; then
        cleaned_key=$(tr '\r' ' ' <<<"$ssh_public_key" | tr '\n' ' ')
        if [[ "$RS_FORCE_WEMUX" != "false" ]]; then
          echo "command=\". ~/.bashrc; /usr/local/bin/wemux pair\" ${cleaned_key}" >> /tmp/superawesomestuffthatisgreat
        else
          echo "${cleaned_key}" >> /tmp/superawesomestuffthatisgreat
        fi
      else
        >&2 echo "$(print_color red)WARNING: Could not find ssh key for $user. The user will need to add one at https://stash.trstone.com/plugins/servlet/ssh/account/keys$(print_color)"
      fi
    done <<<"${ssh_public_keys}"
  done

  # because the wemux script refers to tmux without the full absolute path and therefore, with a command in authorized_keys, it fails
  echo "export PATH=\"/usr/local/bin:\$PATH\"" > /tmp/superawesomestuffthatisgreatbashrc
  sudo mv /tmp/superawesomestuffthatisgreatbashrc "$user_dir/.bashrc"
  sudo mv /tmp/superawesomestuffthatisgreat "$user_dir/.ssh/authorized_keys"
  sudo chmod 600 "$user_dir/.ssh/authorized_keys"
  sudo chown -R "$NO_TERM_LIMITS_REMOTE_PAIR_USERNAME" "$user_dir"
}

install_and_configure_wemux
if user_exists; then
  stop_pairing
fi

rm -rf /tmp/superawesomestuffthatisgreat
create_stuff

# none of this works without ssh access
if is_mac; then
  sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist
fi

get_pair_command
