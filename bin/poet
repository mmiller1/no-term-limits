#!/usr/bin/env bash

function error_handler() {
  >&2 echo "Exited with BAD EXIT CODE '${2}' in ${0} script at line: ${1}."
  exit "$2"
}
trap 'error_handler ${LINENO} $?' ERR
set -o errtrace -o errexit -o nounset -o pipefail

# HELP: wrapper around the python poetry command

command="${1:-}"
if [[ -z "${1:-}" ]]; then
  >&2 echo "usage: $(basename "$0") [command]"
  exit 1
fi
shift

if [[ "$command" == "test" ]]; then
  args="$@"
  if [[ -z "${2:-}" ]] && grep -qE '^test_' <<<"${1:-}" ; then
    test_file=$(grep -lR --exclude=_* --exclude-dir=_* "$1" tests/ || echo '')
    if [[ -z "$test_file" ]]; then
      >&2 echo "ERROR: test_name specified, but it could not be found in any file"
      exit 1
    fi
    class_name_arg=""
    expected_class_name=$(basename "$test_file" .py | perl -pe 's/(^|_)(\w)/\U$2/g')
    if grep -q "^class \<${expected_class_name}\>" "$test_file"; then
      class_name_arg="::${expected_class_name}"
    fi
    args="-s ${test_file}${class_name_arg}::${1}"
  fi
  poetry run coverage run --parallel -m pytest $args
elif [[ "$command" == "update" ]]; then
  if [[ -z "${1:-}" ]]; then
    >&2 echo "usage: $(basename "$0") [update] [library]"
    exit 1
  fi

  poetry update "$@"
# we imagine that the npm install command has code something like this since we
# know that it handles npm i, npm ins, npm install, and even a few common
# mispellings. :D
elif grep -Eq '^i[nstall]*' <<< "$command" ; then
  poetry install "$@"
else
  poetry "$command" "$@"
fi
