#!/usr/bin/env bash

function error_handler() {
  >&2 echo "Exited with BAD EXIT CODE '${2}' in ${0} script at line: ${1}."
  exit "$2"
}
trap 'error_handler ${LINENO} $?' ERR
set -o errtrace -o errexit -o nounset -o pipefail

# HELP: python: finds the python files in a given dirs and updates the docstrings to adhere to pep8 standards

dirs="${*}"
if [[ -z "${1:-}" ]]; then
  >&2 echo "usage: $(basename "$0") [dir1] [dir2] [...]"
  exit 1
fi

python_files=$(find $dirs -type f -name "*.py")

if [[ -z "$python_files" ]]; then
  >&2 echo "ERROR: Could not find any python files in '$dirs'"
  exit 1
fi

if [[ "${NO_TERM_LIMITS_RUN_PYTHON_FIXES:-}" != "false" ]]; then
  if ! command -v autoflake >/dev/null ; then
    pip install autoflake
    asdf reshim python
  fi

  if ! command -v autopep8 >/dev/null ; then
    pip install autopep8
    asdf reshim python
  fi

  autoflake --in-place --remove-all-unused-imports --remove-unused-variables --remove-duplicate-keys --expand-star-imports $python_files
  autopep8 --in-place $python_files
fi

for python_file in $python_files ; do
  perl -pi -e 's/(\w) ?"""$/\1."""/' "$python_file"
  perl -pi -e 's/^( *""") ?([a-z])/\1\u\2/' "$python_file"

  # remove newlines after docstring for method definitions
  # Example:
  #   def method():
  #       """The stuffs."""
  #
  #       code...
  #
  # Becomes:
  #   def method():
  #       """The stuffs."""
  #       code...
  perl -pi -0 -e 's/\b(def[^\n]+\n)( +"""[^"]+"""\n)( *\n)/\1\2/g' "$python_file"

  # add docstring to method definition missing one
  # Example:
  #   def method():
  #       code...
  #
  # OR:
  #   def method():
  #
  #       code...
  #
  # OR:
  #   def method():
  #       # comment
  #
  # OR:
  #   def method(var: type):
  #       code...
  #
  # Becomes:
  #   def method():
  #       """Method."""
  #       code...
  perl -pi -0 -e 's/\n( *)(def )([^(]+)(\([^)]*\)[^:]*:\n)(( *\w| *#)| *\n)/\n\1\2\3\4\1    """\u\3."""\n\6/g' "$python_file"
  perl -pi -0 -e 's/\n( *)(class )(\w+)([^:]*:\n)(( *\w)| *\n)/\n\1\2\3\4\1    """\u\3."""\n\5/g' "$python_file"

  first_line=$(head -n1 "$python_file")
  if ! grep -qE '^""".*"""' <<<"$first_line" ; then
    filename=$(basename "$python_file" .py)
    append_text_to_top_of_file  "\"\"\"${filename}.\"\"\"\n" "$python_file"
  fi
done
