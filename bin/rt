#!/usr/bin/env bash

function error_handler() {
  >&2 echo "Exited with BAD EXIT CODE '${2}' in ${0} script at line: ${1}."
  exit "$2"
}
trap 'error_handler ${LINENO} $?' ERR
set -o errtrace -o errexit -o nounset -o pipefail

# HELP:

clean=false
if [[ "${1:-}" == "clean" ]]; then
  clean=true
  shift
fi

repo_name=$(repo_name)

if [[ -z "${CT_OUTPUT_BASE_DIR:-}" ]]; then
  CT_OUTPUT_BASE_DIR=/var/tmp
fi

output_dir="${CT_OUTPUT_BASE_DIR}/${repo_name}"
mkdir -p "$output_dir"
log_file="${output_dir}/test.log"

test_dirs=$*
if [[ -z "$test_dirs" ]]; then
  for dir in test/unit test/functional test/integration test/agents test/pdfs spec/requests spec/models spec/controllers test/selenium cypress/e2e ; do
    if [[ -d "$dir" ]]; then
      test_dirs="$test_dirs $dir"
    fi
  done
fi

function get_cache_file() {
  local test_dir="$1"
  echo "${output_dir}/passing_$(basename "$test_dir")_files"
}

function get_last_failed_file() {
  local test_dir="$1"
  echo "${output_dir}/last_failed_$(basename "$test_dir")_file"
}

if [[ "$clean" == "true" ]]; then
  for test_dir in $test_dirs ; do
    cache_file="$(get_cache_file "$test_dir")"
    last_failed_file="$(get_last_failed_file "$test_dir")"
    rm -f "$cache_file"
    rm -f "$last_failed_file"
  done
fi

echo >"$log_file"

for test_dir in $test_dirs ; do
  echo "Checking $test_dir"

  files=$(find "${test_dir}" -type f \( -name "*_spec.rb" -o -name "*_test.rb" -o -name "*.cy.js" \) | sort)
  cache_file="$(get_cache_file "$test_dir")"
  last_failed_file="$(get_last_failed_file "$test_dir")"

  touch "$cache_file"

  while read -r file; do
    if ! grep -qE "\<$file\>" "$cache_file" ; then

      test_command="bundle exec ruby"
      if grep -qE '\<spec\/' <<<"$file"; then
        test_command="rspec"
        test_command="bundle exec rspec"

      elif grep -qE '\.cy\.js$' <<<"$file"; then
        # cypress run --env grep="can filter",grepFilterSpecs=true
        test_command="./node_modules/.bin/cypress run --spec"
      fi

      echo "$test_command" "$file"
      if ! $test_command "$file" ; then
        echo "$file" >"$last_failed_file"
        gns DEPRECATION "$log_file"
        exit 1
      else
        if [[ -f "$log_file" ]]; then
          if gns DEPRECATION "$log_file"; then
            echo "$file" >"$last_failed_file"
            exit 1
          fi
        fi
      fi
      echo "$file" >>"$cache_file"
    fi
  done <<<"$files"
done
