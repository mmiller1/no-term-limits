#!/usr/bin/env bash

function error_handler() {
  echo "Exited with BAD EXIT CODE '${2}' in ${0} script at line: ${1}."
  exit "$2"
}
trap 'error_handler ${LINENO} $?' ERR
set -o errtrace -o errexit -o nounset -o pipefail

# HELP: rails_tests: runs each rails test file found in given directory

if [[ "$1" == "clean" ]]; then
  clean=true
  shift
fi

test_dirs=$*
if [[ -z "$test_dirs" ]]; then
  for dir in test/unit test/functional test/integration test/agents test/pdfs spec/requests spec/models spec/controllers test/selenium ; do
    if [[ -d "$dir" ]]; then
      test_dirs="$test_dirs $dir"
    fi
  done
fi

if [[ -z "${RT_OUTPUT_BASE_DIR:-}" ]]; then
  RT_OUTPUT_BASE_DIR=/var/tmp
fi

app_identifier=$(repo_name)

function get_cache_file() {
  local test_dir="$1"
  echo "${RT_OUTPUT_BASE_DIR}/${app_identifier}_passing_$(basename "$test_dir")_files"
}

function get_last_failed_file() {
  local test_dir="$1"
  echo "${RT_OUTPUT_BASE_DIR}/${app_identifier}_last_failed_$(basename "$test_dir")_file"
}

if [[ "$clean" == "true" ]]; then
  for test_dir in $test_dirs ; do
    cache_file="$(get_cache_file "$test_dir")"
    last_failed_file="$(get_last_failed_file "$test_dir")"
    rm -f "$cache_file"
    rm -f "$last_failed_file"
  done
fi

echo >log/test.log

for test_dir in $test_dirs ; do
  echo "Checking $test_dir"

  files=$(find "${test_dir}" -type f \( -name "*_spec.rb" -o -name "*_test.rb" \) | sort)
  cache_file="$(get_cache_file "$test_dir")"
  last_failed_file="$(get_last_failed_file "$test_dir")"

  touch "$cache_file"

  while read -r file; do
    if ! grep -qE "\<$file\>" "$cache_file" ; then

      test_command="ruby"
      if grep -qE '\<spec\/' <<<"$file"; then
        test_command="rspec"
      fi

      echo bundle exec "$test_command" "$file"
      if ! bundle exec "$test_command" "$file" ; then
        echo "$file" >"$last_failed_file"
        gns DEPRECATION log/test.log
        exit 1
      else
        if [[ -f log/test.log ]]; then
          if gns DEPRECATION log/test.log; then
            echo "$file" >"$last_failed_file"
            exit 1
          fi
        fi
      fi
      echo "$file" >>"$cache_file"
    fi
  done <<<"$files"
done
