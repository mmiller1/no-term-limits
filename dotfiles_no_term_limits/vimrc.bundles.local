Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'vim-scripts/PreserveNoEOL'
Plug 'nono/vim-handlebars'
Plug 'editorconfig/editorconfig-vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-dispatch'
Plug 'majutsushi/tagbar'
Plug 'ekalinin/Dockerfile.vim'

" commented out since i think vim-fugitive has this covered
" Plug 'vim-scripts/vcscommand.vim'

" This plugin redefines 6 search commands (/,?,n,N,*,#). At every search command, it automatically prints> At match #N out of M matches
Plug 'henrik/vim-indexed-search'

Plug 'tpope/vim-abolish'
Plug 'christoomey/vim-tmux-navigator'
Plug 'christoomey/vim-tmux-runner'
Plug 'wincent/terminus'

Plug 'burnettk/vim-jenkins'
Plug 'SirVer/ultisnips'
Plug 'ngmy/vim-rubocop'
Plug 'vim-scripts/groovy.vim'

" helps you remember and discover key bindings. type <spacebar> to use.
Plug 'liuchengxu/vim-which-key'

" allows you to hammer <leader>c to open up and manipulate cheat sheets.
" See http://cht.sh/ and the plugin page for more features.
Plug 'dbeniamine/cheat.sh-vim'

" null-ls is a possible ale replacement: https://github.com/jose-elias-alvarez/null-ls.nvim
" kyazdani42/nvim-web-devicons is related to null-ls
"  \'folke/trouble.nvim',
let g:neovim_plugins_ftw = [
  \'neovim/nvim-lspconfig',
  \'hrsh7th/cmp-nvim-lsp',
  \'hrsh7th/cmp-buffer',
  \'hrsh7th/cmp-path',
  \'hrsh7th/cmp-cmdline',
  \'hrsh7th/nvim-cmp',
  \'jose-elias-alvarez/null-ls.nvim',
  \'jose-elias-alvarez/typescript.nvim',
  \'nvim-lua/plenary.nvim',
  \'kyazdani42/nvim-web-devicons',
  \'mfussenegger/nvim-lint',
  \'github/copilot.vim',
  \'nvim-treesitter/nvim-treesitter',
  \'nvim-treesitter/nvim-treesitter-textobjects',
\]
for neovim_plugin_to_plug in g:neovim_plugins_ftw
  " CommandThatNeverFires actually never fires.
  " Instead, we load each of the plugins in g:neovim_plugins_ftw
  " in no_term_limits_vimrc.lua with plug#load.
  " This works well, since we can avoid them in normal vim and load them
  " in neovim, and we can still always register them in this file,
  " so they don't get uninstalled when we run rcup (PlugInstall).
  " we want to install the plugin regardless of vim or nvim, and then only
  " *load* it as appropriate.
  Plug neovim_plugin_to_plug , { 'on': 'CommandThatNeverFires' }
endfor

let g:standard_vim_plugins_ftw = [
  \'dense-analysis/ale',
  \'prabirshrestha/vim-lsp',
  \'mattn/vim-lsp-settings',
  \'rhysd/vim-lsp-ale',
\]

" ale linters that were enabled in normal vim
" flake8', 'mypy', 'pylint', 'pyright
" all python ale linters: Available Linters: ['bandit', 'cspell', 'flake8', 'flakehell', 'jedils', 'mypy', 'prospector', 'pycodestyle', 'pydocstyle', 'pyflakes', 'pylama', 'pylint', 'pylsp', 'pyre', 'pyright', 'unimport', 'vulture']

" vim-lsp is a language server protocol implementation letting normal vim (non-neovim) communicate with a server that knows
" all about how the current language works.
" vim-lsp-ale is a bridge plugin to solve the problem when using both ALE and vim-lsp. With the plugin, diagnostics are provided by vim-lsp and ALE can handle all the errors. Please see https://github.com/rhysd/vim-lsp-ale/blob/master/doc/vim-lsp-ale.txt for more details.
for standard_vim_plugin_to_plug in g:standard_vim_plugins_ftw
  " CommandThatNeverFires actually never fires.
  " Instead, we load each of the plugins in g:neovim_plugins_ftw
  " in no_term_limits_vimrc.lua with plug#load.
  " This works well, since we can avoid them in normal vim and load them
  " in neovim, and we can still always register them in this file,
  " so they don't get uninstalled when we run rcup (PlugInstall).
  " we want to install the plugin regardless of vim or nvim, and then only
  " *load* it as appropriate.
  Plug standard_vim_plugin_to_plug , { 'on': 'CommandThatNeverFires' }
endfor

" this is mostly for vimcat, which is used by cac ("CAt Command)
Plug 'rkitover/vimpager'

" An always-on highlight for a unique character in every word on a line to help you use f, F and family.
Plug 'unblevable/quick-scope'

" Manage branches and tags with fzf. Mapped to <leader>gc (git checkout)
Plug 'stsewd/fzf-checkout.vim'

Plug 'hashivim/vim-terraform'

" vertical lines to show indentation level. really nice for python.
" right now it takes affect for all files the first time you edit a
" python file. we could change it to a buffer-specific toggle-on thing.
Plug 'Yggdroot/indentLine', { 'for': 'python' }
Plug 'Glench/Vim-Jinja2-Syntax'

if !empty($NO_TERM_LIMITS_PROJECTS_DIR)
  Plug $NO_TERM_LIMITS_PROJECTS_DIR . '/github/no-term-limits/vim_plugins/no-term-limits-snippets'
  Plug $NO_TERM_LIMITS_PROJECTS_DIR . '/github/no-term-limits/vim_plugins/our-vim-doc-page'
endif

if filereadable(expand("~/.vimrc.bundles.no_term_limits_overrides"))
  source ~/.vimrc.bundles.no_term_limits_overrides
endif
