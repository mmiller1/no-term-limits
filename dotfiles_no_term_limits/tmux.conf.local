##################### START thoughtbot/dotfiles/tmux.conf
# Except that we removed the source line at the end

# improve colors
set -g default-terminal 'screen-256color'

# as recommended by neovim, the part between the comma and colon should match $TERM outside of tmux
set-option -sa terminal-overrides ',xterm-256color:RGB'

# panes
# colour4 is blue, colour6 is green, 7 is tan, and colour9 is red
# set -g pane-border-style 'fg=magenta bg=magenta'
set -g pane-active-border-style 'bg=colour10 fg=colour14'

setw -g window-status-current-style fg=black,bg=white


# act like vim
setw -g mode-keys vi
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# quick pane for viewing the end of the rails development.log
# https://thoughtbot.com/upcase/videos/tmux-advanced-workflow
# just pound ctrl+l to move to the pane to the right instead of ctrl+s l
bind-key g split-window -h 'less +G log/development.log'

bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+

set -g prefix2 C-s

# start window numbers at 1 to match keyboard order with tmux window order
set -g base-index 1
set-window-option -g pane-base-index 1

# renumber windows sequentially after closing any of them
set -g renumber-windows on

# soften status bar color from harsh green to light gray
set -g status-bg '#666666'
set -g status-fg '#aaaaaa'

# colors: black, red, green, yellow, blue, magenta, cyan, white, or a hex value

# remove administrative debris (session name, hostname, time) in status bar
set -g status-left ''
set -g status-right "#(tmux_status_bar_right)"

# increase scrollback lines
set -g history-limit 10000

# prefix -> back-one-character
bind-key C-b send-prefix
# prefix-2 -> forward-incremental-history-search
bind-key C-s send-prefix -2

# don't suspend-client
unbind-key C-z

##################### END thoughtbot/dotfiles/tmux.conf, except for we removed the source

# since we copied and pasted in the contents of this file above, this isn't necessary:
# if-shell "[ -f ~/dotfiles/tmux.conf ]" 'source ~/dotfiles/tmux.conf'

set-window-option -g main-pane-width 150

# https://superuser.com/questions/343572/how-do-i-reorder-tmux-windows
# capital T sends current window to "top", and thoughtbot's dotfiles
# have changed top from 0 to 1
bind-key T swap-window -t 1

# fix the size so it does not resize when different people type
# ctrl+s shift+r
# this doesn't work in tmux <3
bind-key R resize-window -a

# resize panes by a little with Shift + arrow keys
bind-key -n S-Left  resize-pane -L 2
bind-key -n S-Right resize-pane -R 2
bind-key -n S-Down  resize-pane -D 1
bind-key -n S-Up resize-pane -U 1

# resize panes by a lot with ctrl. doesn't work for kb on mac.
bind-key C-Left resize-pane -L 10
bind-key C-Right resize-pane -R 10
bind-key C-Down resize-pane -D 5
bind-key C-Up resize-pane -U 5

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n 'C-\' if-shell "$is_vim" "send-keys 'C-\\'" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R

# splits. note that - splits horizontally and \ (same key as |) splits vertically.
bind-key - split-window -v -c '#{pane_current_path}'
bind-key '\' split-window -h -c '#{pane_current_path}'

# keep new windows in same path as current path
bind-key c new-window -c '#{pane_current_path}'

# go to another tmux session
bind-key C-j split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

# tmux plugins
set -g @tpm_plugins '          \
   tmux-plugins/tpm             \
   tmux-plugins/tmux-resurrect  \
'

# send `y to zsh to copy current zle line to clipboard
bind-key y send-keys `y

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'

# Stay in copy mode after copying with 'y'
run -b 'tmux bind-key -T copy-mode-vi y send -X copy-selection 2> /dev/null || true'

bind Enter copy-mode # enter copy mode

# unsorted mappings
# rebind-key window/pane controls
bind-key L list-windows
bind-key w kill-pane

# enable reload of config
bind-key r source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf!"

# ideally instead of empty string we'd just default to pane_current_path but we can't get it to work
# doesn't work: bind-key , rename-window '#{pane_current_path}'
bind-key , rename-window '' \; command-prompt -I "#W" "rename-window '%%'"

# defaulting to false, mouse mode allows you to use the mouse to:
#   set the active window, set the active pane, resize panes and automatically switches to copy-mode to select text.
bind-key m run "t toggle_mouse"

if '[ -f ~/.tmux.conf.no_term_limits_overrides ]' 'source ~/.tmux.conf.no_term_limits_overrides'
